import{d as O,x as E,a5 as S,M as R,a8 as V,v as P,ac as U,b as q,o as i,e as x,w as s,k as a,p as o,t as b,a as p,F,r as H,n as m,l as D,_ as A,a6 as k,a7 as B,c as C,ak as L,O as j,ai as z,dB as G}from"./index-B7jvAjdE.js";import{c as W,E as I,M as Q}from"./MetaEventStreamCard-D_xDm3jw.js";import{M as J,a as K}from"./MViewContainer-BTeE2xDT.js";import{M as X}from"./MTwoColumnLayout-C4tHp69a.js";import Y from"./MetaDuration-D1lN-vno.js";import Z from"./MetaRawData-CedjqGjJ.js";import $ from"./MetaTime-D0iYB_lr.js";import ee from"./MetaListCard-CSSWUW2Z.js";import"./MInputMultiSelectCheckbox-D_9f7ub1.js";import"./MInputCheckbox-BqateWtE.js";import"./index-B_QkKjtG.js";import"./MInputHintMessage-DbuBS4Kn.js";import"./MInputSingleSelectSwitch-CuptGC6e.js";import"./index-CDBqmjrS.js";import"./MInputSimpleSelectDropdown-DIlBEFcs.js";import"./index-qTA83-by.js";import"./MInputText-CzhsT8yb.js";import"./debounce-B8gTqdZO.js";import"./isSymbol-B7ZrWRtH.js";import"./utils-Dwlepb3M.js";import"./MInputSingleSelectRadio-BukGu4ZH.js";import"./metaListUtils-B-xQ0HnD.js";import"./_baseIteratee-BXhw53re.js";import"./toString-DMHXP3G8.js";import"./identity-DKeuBCMA.js";import"./button-group-BUOztpby.js";const re=O({__name:"TelemetryMessagesCard",setup(f,{expose:r}){r();const{data:t,error:e}=E(S());function v(u){switch(u){case"Information":return"primary";case"Warning":return"warning";case"Error":return"danger";default:return"primary"}}const l={telemetryMessagesData:t,telemetryMessagesError:e,getBadgeVariantForMessageLevel:v,get MetaListCard(){return ee},get MBadge(){return R},get MTextButton(){return V},get MListItem(){return P},get MCard(){return U},get useSubscription(){return E},get getTelemetryMessagesSubscriptionOptions(){return S}};return Object.defineProperty(l,"__isScriptSetup",{enumerable:!1,value:!0}),l}});function te(f,r,t,e,v,l){const u=q("fa-icon");return e.telemetryMessagesData?(i(),x(e.MetaListCard,{key:0,icon:"message",title:"Telemetry Messages",itemList:e.telemetryMessagesData?.messages,searchFields:["category","level","title","content"],emptyMessage:"No telemetry messages. All components are up-to-date!",permission:"api.system.view_telemetry_messages","data-testid":"telemetry-messages-card"},{"item-card":s(({item:d})=>[a(e.MListItem,null,{"top-right":s(()=>[a(e.MBadge,{variant:e.getBadgeVariantForMessageLevel(d.level)},{default:s(()=>[o(b(d.level),1)],void 0,!0),_:2},1032,["variant"]),(i(!0),p(F,null,H(d.links,M=>(i(),p("div",null,[a(e.MTextButton,{to:M.url},{default:s(()=>[o(b(M.text),1)],void 0,!0),_:2},1032,["to"])]))),256))]),"bottom-left":s(()=>[m("span",null,b(d.body),1)]),default:s(()=>[o(b(d.title),1)],void 0,!0),_:2},1024)]),_:1},8,["itemList"])):e.telemetryMessagesError?(i(),x(e.MCard,{key:1,title:"Telemetry Messages",error:e.telemetryMessagesError,"data-testid":"telemetry-messages-card"},{icon:s(()=>[a(u,{icon:"message"})]),_:1},8,["error"])):D("",!0)}const ae=A(re,[["render",te],["__file","TelemetryMessagesCard.vue"]]);function _(f,r,t){return{label:f,filter:r,expression:t}}function T(f,r,t,e,v){const l=[_("app","=","metaplay-server")];r&&l.push(_("namespace","=",r)),t.forEach(y=>l.push(y));const d={datasource:"Loki",queries:[{expr:`{${l.reduce((y,w)=>`${y}${y?",":""}${w.label}${w.filter}"${w.expression}"`,"")}}`}],range:{from:e,to:v}},M=JSON.stringify(d);return`${f}/explore?orgId=1&left=${M}`}const se=O({__name:"GameServerMessageCenterView",setup(f,{expose:r}){r();const t=k(),{data:e,error:v}=E(B()),l=C(()=>t.environmentInfo.grafanaUri),u=C(()=>{if(t.environmentInfo.grafanaUri)return T(t.environmentInfo.grafanaUri,t.environmentInfo.kubernetesNamespace??void 0,[_("loglevel","=~","ERR|WRN")],"now-1h","now")});function d(c){if(!t.environmentInfo.grafanaUri)return;const n=new Date(c.time);return T(t.environmentInfo.grafanaUri,t.environmentInfo.kubernetesNamespace??void 0,[],new Date(+n-3e4),new Date(+n+1e3))}const M=C(()=>{if(e.value){const c=/\n.*/g;return e.value.errors.map(g=>new I(g.timestamp,g.sourceType,g.message.replace(c,""),g.id,g,"","",""))}else return[]});function y(c){const n=c.typeData.sourceData,g=new L(n.source,n.message);return n.exception&&g.addDetail("Exception",n.exception),n.stackTrace&&g.addDetail("Stack",n.stackTrace),g}const w=C(()=>{if(e.value?.overMaxErrorCount){const c=e.value.errorCount,n=G(e.value);return[{title:"Too Many Errors",message:`The server has generated over ${c} errors ${n}. This may indicate a problem with the server.`,variant:"danger"}]}else return[]}),{data:N}=E(S()),h={staticInfos:t,errorCountsData:e,errorCountsError:v,grafanaEnabled:l,grafanaMoreCompleteHistory:u,getGrafanaLogsUrl:d,eventStream:M,eventToDisplayError:y,pageAlerts:w,telemetryMessagesData:N,computed:C,get EventStreamItemBase(){return W},get EventStreamItemEvent(){return I},get MetaEventStreamCard(){return Q},get useStaticInfos(){return k},get MetaDuration(){return Y},get MetaRawData(){return Z},get MetaTime(){return $},get DisplayError(){return L},get MButton(){return j},get MErrorCallout(){return z},get MTextButton(){return V},get MPageOverviewCard(){return J},get MViewContainer(){return K},get MTwoColumnLayout(){return X},get useSubscription(){return E},TelemetryMessagesCard:ae,get collectorRunTimespanHumanized(){return G},get makeGrafanaQueryExpression(){return _},get makeGrafanaUri(){return T},get getTelemetryMessagesSubscriptionOptions(){return S},get getServerErrorsSubscriptionOptions(){return B}};return Object.defineProperty(h,"__isScriptSetup",{enumerable:!1,value:!0}),h}}),ne={class:"tw-space-y-1"},oe={key:0},ie={key:1},le={key:0,class:"tw-text-xs+ tw-text-neutral-500"},me={key:0,class:"tw-ml-1"},ue={key:1,class:"tw-ml-1"},de={class:"tw-mt-6 tw-space-y-1"},ge={key:0,class:"tw-text-sm"};function pe(f,r,t,e,v,l){return i(),x(e.MViewContainer,{"is-loading":!e.errorCountsData,permission:"api.system.view_error_logs",error:e.errorCountsError,alerts:e.pageAlerts},{overview:s(()=>[a(e.MPageOverviewCard,{title:"Game Server Message Center",subtitle:""},{default:s(()=>[m("div",ne,[r[7]||(r[7]=m("h4",null,"About Game Server Errors",-1)),r[8]||(r[8]=m("p",null,"These are the most recent errors that have been logged by the server. Errors are often indicative of a problem with the server, and should be investigated.",-1)),m("p",null,[e.errorCountsData?(i(),p("span",oe,[r[0]||(r[0]=o("The logging collector was restarted ")),a(e.MetaTime,{date:e.errorCountsData.collectorRestartTime,showAs:"timeago"},null,8,["date"]),r[1]||(r[1]=o("."))])):(i(),p("span",ie,"Server errors not loaded..."))]),e.errorCountsData?(i(),p("p",le,[r[5]||(r[5]=o("Errors listed on this page are only stored for ")),a(e.MetaDuration,{duration:e.errorCountsData.maxAge,showAs:"humanized","disable-tooltip":""},null,8,["duration"]),r[6]||(r[6]=o(" and are not retained across server restarts.")),e.grafanaEnabled?(i(),p("span",me,[r[3]||(r[3]=o("A more complete history of errors and warnings is available inÂ ")),a(e.MTextButton,{to:e.grafanaMoreCompleteHistory,permission:"dashboard.grafana.view"},{default:s(()=>r[2]||(r[2]=[o("Grafana")]),void 0,!0),_:1},8,["to"]),r[4]||(r[4]=m("span",null,".",-1))])):(i(),p("span",ue,"When Grafana is configured, a more complete history of errors and warnings can be found there."))])):D("",!0)]),m("div",de,[r[11]||(r[11]=m("h4",null,"About Telemetry Messages",-1)),r[12]||(r[12]=m("p",{class:"tw-text-sm"},"Telemetry messages inform you of more recent versions of components being available that are currently used by the game server.",-1)),e.telemetryMessagesData?(i(),p("p",ge,[r[9]||(r[9]=o("Telemetry messages were updated ")),a(e.MetaTime,{date:e.telemetryMessagesData.updatedAt,showAs:"timeago"},null,8,["date"]),r[10]||(r[10]=o("."))])):D("",!0),r[13]||(r[13]=m("p",{class:"tw-text-xs+ tw-text-neutral-500"},"For example, when more recent versions of the Metaplay SDK, .NET runtime, or the Helm chart are published, you'll get messages about them on this page. The messages are received from the Metaplay developer portal using the server's built-in telemetry manager which reports the component versions used and gets the messages in return.",-1))])],void 0,!0),_:1})]),default:s(()=>[a(e.MTwoColumnLayout,null,{default:s(()=>[a(e.MetaEventStreamCard,{icon:"bug",title:"Latest Game Server Errors","event-stream":e.eventStream,utilitiesMode:"filter","empty-message":"No errors logged.","no-results-message":"No errors found. Try a different search.","allow-pausing":"",permission:"api.system.view_error_logs","data-testId":"game-server-errors-card"},{"event-details":s(({event:u})=>[a(e.MErrorCallout,{error:e.eventToDisplayError(u)},{buttons:s(()=>[a(e.MButton,{to:e.getGrafanaLogsUrl(u),"disabled-tooltip":e.grafanaEnabled?void 0:"Grafana has not been configured for this environment.",permission:"dashboard.grafana.view"},{default:s(()=>r[14]||(r[14]=[o("View in Grafana")]),void 0,!0),_:2},1032,["to","disabled-tooltip"])]),_:2},1032,["error"])]),_:1},8,["event-stream"]),a(e.TelemetryMessagesCard)],void 0,!0),_:1}),a(e.MetaRawData,{kvPair:e.errorCountsData,name:"errorCountsData"},null,8,["kvPair"]),a(e.MetaRawData,{kvPair:e.telemetryMessagesData,name:"telemetryMessagesData"},null,8,["kvPair"])],void 0,!0),_:1},8,["is-loading","error","alerts"])}const Ue=A(se,[["render",pe],["__file","GameServerMessageCenterView.vue"]]);export{Ue as default};
